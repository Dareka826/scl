ANSI C / Appendix A - Language Syntax Summary

A.1 Lexical Grammar

A.1.1 Tokens

(3.1) token:
    keyword
    identifier
    constant
    string-literal
    operator
    punctuator

(3.1) preprocessing-token:
    header-name
    identifier
    pp-number
    character-constant
    string-literal
    operator
    punctuator
    ~each non-white-space character that cannot be one of the above~

A.1.2 Keywords

(3.1.1) keyword:
    'auto'
    'break'
    'case'
    'char'
    'const'
    'continue'
    'default'
    'do'
    'double'
    'else'
    'enum'
    'extern'
    'float'
    'for'
    'goto'
    'if'
    'int'
    'long'
    'register'
    'return'
    'short'
    'signed'
    'sizeof'
    'static'
    'struct'
    'switch'
    'typedef'
    'union'
    'unsigned'
    'void'
    'volatile'
    'while'

A.1.3 Identifiers

(3.1.2) identifier:
    nondigit
    identifier nondigit
    identifier digit

(3.1.2) nondigit:
    [a-zA-Z_]

(3.1.2) digit:
    [0-9]

A.1.4 Constants

(3.1.3) constant:
    floating-constant
    integer-constant
    enumeration-constant
    character-constant

(3.1.3.1) floating-constant:
    fractional-constant exponent-part? floating-suffix?
    digit-sequence exponent-part floating-suffix?

(3.1.3.1) fractional-constant:
    digit-sequence? '.' digit-sequence
    digit-sequence '.'

(3.1.3.1) exponent-part:
    [eE] sign? digit-sequence

(3.1.3.1) sign:
    '+'
    '-'

(3.1.3.1) digit-sequence:
    digit
    digit-sequence digit

(3.1.3.1) floating-suffix:
    [fF]
    [lL]

(3.1.3.2) integer-constant:
    decimal-constant integer-suffix?
    octal-constant integer-suffix?
    hexadecimal-constant integer-suffix?

(3.1.3.2) decimal-constant:
    nonzero-digit
    decimal-constant digit

(3.1.3.2) octal-constant:
    '0'
    octal-constant octal-digit

(3.1.3.2) hexadecimal-constant:
    '0' [xX] hexadecimal-digit
    hexadecimal-constant hexadecimal-digit

(3.1.3.2) nonzero-digit:
    [1-9]

(3.1.3.2) octal-digit:
    [0-7]

(3.1.3.2) hexadecimal-digit:
    [0-9]
    [a-fA-F]

(3.1.3.2) integer-suffix:
    unsigned-suffix long-suffix?
    long-suffix unsigned-suffix?

(3.1.3.2) unsigned-suffix:
    [uU]

(3.1.3.2) long-suffix:
    [lL]

(3.1.3.3) enumeration-constant:
    identifier

(3.1.3.4) character-constant:
    "'" c-char-sqeuence "'"
    "L'" c-char-sqeuence "'"

(3.1.3.4) c-char-sqeuence:
    c-char
    c-char-sqeuence c-char

(3.1.3.4) c-char:
    ~any member of the source character set except the single-quote "'", backslash '\' or new-line character~
    escape-sequence

(3.1.3.4) escape-sequence:
    simple-escape-sequence
    octal-escape-sequence
    hexadecimal-escape-sequence

(3.1.3.4) simple-escape-sequence:
    '\' [abfnrtv]
    "\'"
    '\"'
    '\?'
    '\\'

(3.1.3.4) octal-escape-sequence:
    '\' octal-digit
    '\' octal-digit octal-digit
    '\' octal-digit octal-digit octal-digit

(3.1.3.4) hexadecimal-escape-sequence:
    '\x' hexadecimal-digit
    hexadecimal-escape-sequence hexadecimal-digit

A.1.5 String Literals

(3.1.4) string-literal:
    '"' s-char-sequence? '"'
    'L"' s-char-sequence? '"'

(3.1.4) s-char-sequence:
    s-char
    s-char-sequence s-char

(3.1.4) s-char:
    ~any member of the source character set except the double-quote '"', backslash '\' or new-line character~
    escape-sequence

A.1.6 Operators

(3.1.5) operator:
    '[' | ']' | '(' | ')' | '.' | '->'
    '++' | '--' | '&' | '*' | '+' | '-' | '~' | '!' | 'sizeof'
    '/' | '%' | '<<' | '>>' | '<' | '>' | '<=' | '>=' | '==' | '!='
    '^' | '|' | '&&' | '||' | '?' | ':'
    '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='
    ',' | '#' | '##'

A.1.7 Punctuators

(3.1.6) punctuator:
    '[' | ']' | '(' | ')' | '{' | '}' | '*' | ',' | ':' | '=' | ';' | '...' | '#'

A.1.8 Header Names

(3.1.7) header-name:
    '<' h-char-sequence '>'
    '"' q-char-sequence '"'

(3.1.7) h-char-sequence:
    h-char
    h-char-sequence h-char

(3.1.7) h-char:
    ~any member of the source character set except the new-line character and '>'~

(3.1.7) q-char-sequence:
    q-char
    q-char-sequence q-char

(3.1.7) q-char:
    ~any member of the source character set except the new-line character and '"'~

A.1.9 Preprocessing Numbers

(3.1.8) pp-number:
    digit
    '.' digit
    pp-number digit
    pp-number nondigit
    pp-number [eE] sign
    pp-number '.'

A.2 Phrase Structure Grammar

A.2.1 Expressions

(3.3.1) primary-expression:
    identifier
    constant
    string-literal
    '(' expression ')'

(3.3.2) postfix-expression:
    primary-expression
    postfix-expression '[' expression ']'
    postfix-expression '(' argument-expression-list? ')'
    postfix-expression '.' identifier
    postfix-expression '->' identifier
    postfix-expression '++'
    postfix-expression '--'

(3.3.2) argument-expression-list:
    assignment-expression
    argument-expression-list ',' assignment-expression

(3.3.3) unary-expression:
    postfix-expression
    '++' unary-expression
    '--' unary-expression
    unary-operator cast-expression
    'sizeof' unary-expression
    'sizeof' '(' type-name ')'

(3.3.3) unary-operator:
    '&' | '*' | '+' | '-' | '~' | '!'

(3.3.4) cast-expression:
    unary-expression
    '(' type-name ')' cast-expression

(3.3.5) multiplicative-expression:
    cast-expression
    multiplicative-expression '*' cast-expression
    multiplicative-expression '/' cast-expression
    multiplicative-expression '%' cast-expression

(3.3.6) additive-expression:
    multiplicative-expression
    additive-expression '+' multiplicative-expression
    additive-expression '-' multiplicative-expression

(3.3.7) shift-expression:
    additive-expression
    shift-expression '<<' additive-expression
    shift-expression '>>' additive-expression

(3.3.8) relational-expression:
    shift-expression
    relational-expression '<' shift-expression
    relational-expression '>' shift-expression
    relational-expression '<=' shift-expression
    relational-expression '>=' shift-expression

(3.3.9) equality-expression:
    relational-expression
    equality-expression '==' relational-expression
    equality-expression '!=' relational-expression

(3.3.10) AND-expression:
    equality-expression
    AND-expression '&' equality-expression

(3.3.11) exclusive-OR-expression:
    AND-expression
    exclusive-OR-expression '^' AND-expression

(3.3.12) inclusive-OR-expression:
    exclusive-OR-expression
    inclusive-OR-expression '|' exclusive-OR-expression

(3.3.13) logical-AND-expression:
    inclusive-OR-expression
    logical-AND-expression '&&' inclusive-OR-expression

(3.3.14) logical-OR-expression:
    logical-AND-expression
    logical-OR-expression '||' logical-AND-expression

(3.3.15) conditional-expression:
    logical-OR-expression
    logical-OR-expression '?' expression ':' conditional-expression

(3.3.16) assignment-expression:
    conditional-expression
    unary-expression assignment-operator assignment-expression

(3.3.16) assignment-operator:
    '=' | '*=' | '/=' | '%=' | '+=' | '-=' | '<<=' | '>>=' | '&=' | '^=' | '|='

(3.3.17) expression:
    assignment-expression
    expression ',' assignment-expression

(3.4) constant-expression:
    conditional-expression

A.2.2 Declarations

(3.5) declaration:
    declaration-specifiers init-declarator-list? ';'

(3.5) declaration-specifiers:
    storage-class-specifier declaration-specifiers?
    type-specifier declaration-specifiers?
    type-qualifier declaration-specifiers?

(3.5) init-declarator-list:
    init-declarator
    init-dectararor-list ',' init-declarator

(3.5) init-declarator:
    declarator
    declarator '=' initializer

(3.5.1) storage-class-specifier:
    'typedef'
    'extern'
    'static'
    'auto'
    'register'

(3.5.2) type-specifier:
    'void'
    'char'
    'short'
    'int'
    'long'
    'float'
    'double'
    'signed'
    'unsigned'
    struct-or-union-specifier
    enum-specifier
    typedef-name

(3.5.2.1) struct-or-union-specifier:
    struct-or-union identifier? '{' struct-declaration-list '}'
    struct-or-union identifier

(3.5.2.1) struct-or-union:
    'struct'
    'union'

(3.5.2.1) struct-declaration-list:
    struct-declaration
    struct-declaration-list struct-declaration

(3.5.2.1) struct-declaration:
    specifier-qualifier-list  struct-declarator-list ';'

(3.5.2.1) specifier-qualifier-list:
    type-specifier specifier-qualifier-list?
    type-qualifier specifier-qualifier-list?

(3.5.2.1) struct-declarator-list:
    struct-declarator
    struct-declarator-list ',' struct-declarator

(3.5.2.1) struct-declarator:
    declarator
    declarator? ':' constant-expression

(3.5.2.2) enum-specifier:
    'enum' identifier? '{' enumerator-list '}'
    'enum' identifier

(3.5.2.2) enumerator-list:
    enumerator
    enumerator-list ',' enumerator

(3.5.2.2) enumerator:
    enumeration-constant
    enumeration-constant '=' constant-expression

(3.5.3) type-qualifier:
    'const'
    'volatile'

(3.5.4) declarator:
    pointer? direct-declarator

(3.5.4) direct-declarator:
    identifier
    '(' declarator ')'
    direct-declarator '[' constant-expression? ']'
    direct-declarator '(' parameter-type-list ')'
    direct-declarator '(' identifier-list? ')'

(3.5.4) pointer:
    '*' type-qualifier-list?
    '*' type-qualifier-list? pointer

(3.5.4) type-qualifier-list:
    type-qualifier
    type-qualifier-list type-qualifier

(3.5.4) parameter-type-list:
    parameter-list
    parameter-list ',' '...'

(3.5.4) parameter-list:
    parameter-declaration
    parameter-list ',' parameter-declaration

(3.5.4) parameter-declaration:
    declaration-specifiers declarator
    declaration-specifiers abstract-declarator?

(3.5.4) identifier-list:
    identifier
    identifier-list ',' identifier

(3.5.5) type-name:
    specifier-qualifier-list abstract-declarator?

(3.5.5) abstract-declarator:
    pointer
    pointer? direct-abstract-declarator

(3.5.5) direct-abstract-declarator:
    '(' abstract-declarator ')'
    direct-abstract-declarator? '[' constant-expression? ']'
    direct-abstract-declarator? '(' parameter-type-list? ')'

(3.5.6) typedef-name:
    identifier

(3.5.7) initializer:
    assignment-expression
    '{' initializer-list '}'
    '{' initializer-list ',' '}'

(3.5.7) initializer-list:
    initializer
    initializer-list ',' initializer

A.2.3 Statements

(3.6) statement:
    labeled-statement
    compound-statement
    expression-statement
    selection-statement
    iteration-statement
    jump-statement

(3.6.1) labeled-statement:
    identifier ':' statement
    'case' constant-expression ':' statement
    'default' ':' statement

(3.6.2) compound-statement:
    '{' declaration-list? statement-list? '}'

(3.6.2) declaration-list:
    declaration
    declaration-list declaration

(3.6.2) statement-list:
    statement
    statement-list statement

(3.6.3) expression-statement:
    expression? ';'

(3.6.4) selection-statement:
    'if' '(' expression ')' statement
    'if' '(' expression ')' statement 'else' statement
    'switch' '(' expression ')' statement

(3.6.5) iteration-statement:
    'while' '(' expression ')' statement
    'do' statement 'while' '(' expression ')' ';'
    'for' '(' expression? ';' expression? ';' expression? ')' statement

(3.6.6) jump-statement:
    'goto' identifier ';'
    'continue' ';'
    'break' ';'
    'return' expression? ';'

A.2.3 External Definitions

(3.7) translation-unit:
    external-declaration
    translation-unit external-declaration

(3.7) external-declaration:
    function-definition
    declaration

(3.7.1) function-definition:
    declaration-specifiers? declarator declaration-list? compound-statement

A.3 Preprocessing Directives

(3.8) preprocessing-file:
    group?

(3.8) group:
    group-part
    group group-part

(3.8) group-part:
    pp-tokens? new-line
    if-section
    control-line

(3.8.1) if-section:
    if-group elif-groups? else-group? endif-line

(3.8.1) if-group:
    '#' 'if' constant-expression new-line group?
    '#' 'ifdef' identifier new-line group?
    '#' 'ifndef' identifier new-line group?

(3.8.1) elif-groups:
    elif-group
    elif-groups elif-group

(3.8.1) elif-group:
    '#' 'elif' constant-expression new-line group?

(3.8.1) else-group:
    '#' 'else' new-line group?

(3.8.1) endif-line:
    '#' 'endif' new-line

control-line:
(3.8.2)    '#' 'include' pp-tokens new-line
(3.8.3)    '#' 'define' identifier replacement-list new-line
(3.8.3)    '#' 'define' identifier lparen identifier-list? ')' replacement-list new-line
(3.8.3)    '#' 'undef' identifier new-line
(3.8.4)    '#' 'line' pp-tokens new-line
(3.8.5)    '#' 'error' pp-tokens? new-line
(3.8.6)    '#' 'pragma' pp-tokens? new-line
(3.8.7)    '#' new-line

(3.8.3) lparen:
    ~the left-parenthesis character without preceding white space~

(3.8.3) replacement-list:
    pp-tokens?

(3.8) pp-tokens:
    preprocessing-token
    pp-tokens preprocessing-token

(3.8) new-line:
    ~the new-line character~
