#ifndef __SCL_ALLOC_<@SIZE@>_H_uZ6EyE7j
#define __SCL_ALLOC_<@SIZE@>_H_uZ6EyE7j

#include "types.h"
#include "errors.h"

typedef struct alloc<@SIZE@> {
    bool_t valid;
    u8_t *( ptrs[<@SIZE@>]);
    usize_t  ids[<@SIZE@>];
} alloc_t<@SIZE@>;


void alloc_init<@SIZE@>(alloc_t<@SIZE@> * const in_ptr);
void alloc_deinit<@SIZE@>(alloc_t<@SIZE@> * const in_ptr);

u8_t *alloc_new<@SIZE@>(alloc_t<@SIZE@> * const in_ptr, usize_t in_id, size_t in_n);
u8_t *alloc_new_rand<@SIZE@>(alloc_t<@SIZE@> * const in_ptr, usize_t * const out_id, size_t in_n);

void alloc_free<@SIZE@>(alloc_t<@SIZE@> * const in_ptr, usize_t in_id);
void alloc_free_all<@SIZE@>(alloc_t<@SIZE@> * const in_ptr);

#endif
